# 包下的所有类简要说明
(1)	Parcel1.java	:	一个简单的内部类示例
(2)	Parcel2.java	:	通过外部类的一个方法，返回一个内部类的引用
(3) Sequence.java	:	内部类有对其外围类的所有元素的访问权限
(4) DotThis.java	:	使用 .this
(5) DotNew.java		:	使用 .new
(6) Parcel3.java	:	使用 .new 来创建内部类实例  <vs.> 之前通过的方法:设置一个专门的方法来 return new一个内部类对象
(7) Destination.java:	(8)的辅助接口
(8) Contents.java	:	(8)的辅助接口
(9) TestParcel.java	:	private / protected 类型的内部类访问控制
(10) Parcel5.java	:	一个定义在方法中的内部类，在外部类的方法中创建内部类
(11) Parcel6.java	:	一个定义在作用域中的内部类，此作用域在方法内部

-------------------------------------------( 匿名内部类 )-------------------------------------------
(12) Parcel7.java	:	一个匿名内部类，创建一个继承自接口的实例，返回实例时才进行定义 
(13) Parcel8.java	:	一个匿名内部类，但所继承的基类带有构造函数，同时内部类重写了基类的其他方法
(14) Warpping.java	:	Parcel8.java 的辅助类，当作接口来使用
(15) Parcel9.java	:	验证匿名内部类所访问的外部变量必须是 final 的，否则报错
(16) AnonymousConstructor.java	: 匿名内部类自身的构造方法实现，在域中使用 {}
(17) Parcel10.java	:	带实例初始化的匿名内部类
(18) Factories.java	:	匿名内部类在工厂方法中的应用(无需单独创建服务工厂类，将服务工厂通过内部类的方式直接在服务类中进行实现)
(19) Games.java		:	匿名内部类方式的工厂方法应用实例

-------------------------------------------( 嵌套内部类 )-------------------------------------------
(20) Parcel11.java				: 嵌套类 demo
(21) ClassInInterface.java		: 嵌套类放在 interface 内部实现, 创建实例调用接口方法的方式 : 内部类().内部类方法()
(22) TestBed.java				: 代替main()的测试用内部类
(23) MultiNestingAccess.java	: 无论嵌套几层，内部类都可以访问外部类所有成员

--------------------------------------------(多重继承)---------------------------------------------
(24) MultiInterfaces.java		: 多重继承：接口方式实现  vs. 内部类方式
(25) MultiImplementation.java	: 多重继承：通过匿名内部类，同时继承了具体类和抽象类
(26) Callbacks.java				: 闭包和回调 

--------------------------------------------(内部类在控制框架中的应用)---------------------------------------------
(27) Event.java			: 控制事件的接口. 事件调度基本框架 : 开始 -> 准备 -> 执行 
(28) TestNanoTime.java	: 测试 (27) 中的  System.nanoTime()
(29) Controller.java	: 事件调度基本框架 : 运行框架













=================== 中英翻译 =====================
parcel
	美 ['pɑrs(ə)l]	英 ['pɑː(r)s(ə)l]
	n.		包裹；小包；一块地；一片地
	v.		包；裹好；打包
	adj.	部分(时间)的
	adv.	局部地
	网络.	邮包；混合包
	
